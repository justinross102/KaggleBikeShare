filter(Game != "Gm#", # get rid of monthly headers
boxscore != "preview") %>%# get rid of games that haven't been played yet
mutate(Home = if_else(Home == "@", F, T)) %>%
select(-20, -21, -22)
select(-c(3, 20, 21, 22)
phillies_wins %>%
phillies_wins %>%
filter(Game != "Gm#", # get rid of monthly headers
boxscore != "preview") %>%# get rid of games that haven't been played yet
mutate(Home = if_else(Home == "@", F, T)) %>%
select(-c(3, 20, 21, 22))
phillies_wins %>%
filter(Game != "Gm#", # get rid of monthly headers
boxscore != "preview") %>%# get rid of games that haven't been played yet
mutate(Home = if_else(Home == "@", F, T)) %>%
select(-c(3, 10, 20, 21, 22))
phillies_wins %>%
filter(Game != "Gm#", # get rid of monthly headers
boxscore != "preview") %>%# get rid of games that haven't been played yet
mutate(Home = if_else(Home == "@", F, T),
Save = if_else(Save == "", NA, Save)) %>%
select(-c(3, 10, 20, 21, 22))
phillies_wins %>%
filter(Game != "Gm#", # get rid of monthly headers
boxscore != "preview") %>%# get rid of games that haven't been played yet
mutate(Home = if_else(Home == "@", F, T),
Save = if_else(Save == "", NA, Save)) %>%
select(-c(1, 3, 10, 20, 21, 22))
phillies_wins %>%
filter(Game != "Gm#", # get rid of monthly headers
boxscore != "preview") %>%# get rid of games that haven't been played yet
mutate(Home = if_else(Home == "@", F, T),
Save = if_else(Save == "", NA, Save),
R = as.numeric(R)) %>%
select(-c(1, 3, 10, 20, 21, 22))
phillies_wins %>%
filter(Game != "Gm#", # get rid of monthly headers
boxscore != "preview") %>%# get rid of games that haven't been played yet
mutate(Home = if_else(Home == "@", F, T),
Save = if_else(Save == "", NA, Save),
R = as.numeric(R),
RA = as.numeric(RA)) %>%
select(-c(1, 3, 10, 20, 21, 22))
phillies_wins %>%
filter(Game != "Gm#", # get rid of monthly headers
boxscore != "preview") %>%# get rid of games that haven't been played yet
mutate(Home = if_else(Home == "@", F, T),
Save = if_else(Save == "", NA, Save),
R = as.numeric(R),
RA = as.numeric(RA),
Rank = as.numeric(Rank)) %>%
select(-c(1, 3, 10, 20, 21, 22))
phillies_wins %>%
filter(Game != "Gm#", # get rid of monthly headers
boxscore != "preview") %>%# get rid of games that haven't been played yet
mutate(Home = if_else(Home == "@", F, T),
Save = if_else(Save == "", NA, Save),
R = as.numeric(R),
RA = as.numeric(RA),
Rank = as.numeric(Rank),
GB = as.double(GB)) %>%
select(-c(1, 3, 10, 20, 21, 22))
phillies_wins %>%
filter(Game != "Gm#", # get rid of monthly headers
boxscore != "preview") %>%# get rid of games that haven't been played yet
mutate(Home = if_else(Home == "@", F, T),
Save = if_else(Save == "", NA, Save),
R = as.numeric(R),
RA = as.numeric(RA),
Rank = as.numeric(Rank),
GB = as.numeric(GB)) %>%
select(-c(1, 3, 10, 20, 21, 22))
phillies_wins %>%
filter(Game != "Gm#", # get rid of monthly headers
boxscore != "preview") %>%# get rid of games that haven't been played yet
mutate(Home = if_else(Home == "@", F, T),
Save = if_else(Save == "", NA, Save),
R = as.numeric(R),
RA = as.numeric(RA),
Rank = as.numeric(Rank),
GB = as.numeric(GB),
Attendance = as.numeric(Attendance)) %>%
select(-c(1, 3, 10, 20, 21, 22))
phillies_wins %>%
filter(Game != "Gm#", # get rid of monthly headers
boxscore != "preview") %>%# get rid of games that haven't been played yet
mutate(Home = if_else(Home == "@", F, T),
Save = if_else(Save == "", NA, Save),
R = as.numeric(R),
RA = as.numeric(RA),
Rank = as.numeric(Rank),
GB = as.numeric(GB),
Attendance = as.double(Attendance)) %>%
select(-c(1, 3, 10, 20, 21, 22))
phillies_wins %>%
filter(Game != "Gm#", # get rid of monthly headers
boxscore != "preview") %>%# get rid of games that haven't been played yet
mutate(Home = if_else(Home == "@", F, T),
Save = if_else(Save == "", NA, Save),
R = as.numeric(R),
RA = as.numeric(RA),
Rank = as.numeric(Rank),
GB = as.numeric(GB)) %>%
select(-c(1, 3, 10, 20, 21, 22))
phillies_wins %>%
filter(Game != "Gm#", # get rid of monthly headers
boxscore != "preview") %>%# get rid of games that haven't been played yet
mutate(Home = if_else(Home == "@", F, T),
Save = if_else(Save == "", NA, Save),
R = as.numeric(R),
RA = as.numeric(RA),
Rank = as.numeric(Rank),
GB = as.numeric(GB),
Attendance = as.numeric(Attendance)) %>%
select(-c(1, 3, 10, 20, 21, 22))
phillies_wins %>%
filter(Game != "Gm#", # get rid of monthly headers
boxscore != "preview") %>%# get rid of games that haven't been played yet
mutate(Home = if_else(Home == "@", F, T),
Save = if_else(Save == "", NA, Save),
R = as.numeric(R),
RA = as.numeric(RA),
Rank = as.numeric(Rank),
GB = as.numeric(GB),
Attendance = as.numeric(gsub(",", "", Attendance))) %>%
select(-c(1, 3, 10, 20, 21, 22))
phillies_wins %>%
ggplot(mapping = aes(x = Home, y = R)) +
geom_boxplot()
phillies_games <- phillies_games %>%
filter(Game != "Gm#", # get rid of monthly headers
boxscore != "preview") %>%# get rid of games that haven't been played yet
mutate(Home = if_else(Home == "@", F, T),
Save = if_else(Save == "", NA, Save),
R = as.numeric(R),
RA = as.numeric(RA),
Rank = as.numeric(Rank),
GB = as.numeric(GB),
Attendance = as.numeric(gsub(",", "", Attendance))) %>%
select(-c(1, 3, 10, 20, 21, 22))
website = "https://www.baseball-reference.com/teams/PHI/2023-schedule-scores.shtml"
phillies_games <- get_html_table(website, 1)
# change col names
colnames(phillies_wins) <- c("Game", "Date", "boxscore", "Team", "Home", "Opp", "W_or_L", "R", "RA", "Inn", "W-L", "Rank",
"GB", "Win", "Loss", "Save", "Time", "D/N", "Attendance", "cLI", "Streak", "Orig_Scheduled")
phillies_games <- phillies_games %>%
filter(Game != "Gm#", # get rid of monthly headers
boxscore != "preview") %>%# get rid of games that haven't been played yet
mutate(Home = if_else(Home == "@", F, T),
Save = if_else(Save == "", NA, Save),
R = as.numeric(R),
RA = as.numeric(RA),
Rank = as.numeric(Rank),
GB = as.numeric(GB),
Attendance = as.numeric(gsub(",", "", Attendance))) %>%
select(-c(1, 3, 10, 20, 21, 22))
phillies_games %>%
ggplot(mapping = aes(x = Home, y = R)) +
geom_boxplot()
rm(list = ls())
library(tidyverse)
library(rvest)
library(vroom)
get_html_table <- function(url, index, header = T){
df <- url %>%
read_html() %>%
html_elements("table") %>%
html_table(header=header) %>%
.[[index]]
colnames(df) <- make.names(colnames(df))
df
}
website = "https://www.baseball-reference.com/teams/PHI/2023-schedule-scores.shtml"
phillies_games <- get_html_table(website, 1)
# change col names
colnames(phillies_wins) <- c("Game", "Date", "boxscore", "Team", "Home", "Opp", "W_or_L", "R", "RA", "Inn", "W-L", "Rank",
"GB", "Win", "Loss", "Save", "Time", "D/N", "Attendance", "cLI", "Streak", "Orig_Scheduled")
phillies_games <- phillies_games %>%
filter(Game != "Gm#", # get rid of monthly headers
boxscore != "preview") %>%# get rid of games that haven't been played yet
mutate(Home = if_else(Home == "@", F, T),
Save = if_else(Save == "", NA, Save),
R = as.numeric(R),
RA = as.numeric(RA),
Rank = as.numeric(Rank),
GB = as.numeric(GB),
Attendance = as.numeric(gsub(",", "", Attendance))) %>%
select(-c(1, 3, 10, 20, 21, 22))
website = "https://www.baseball-reference.com/teams/PHI/2023-schedule-scores.shtml"
phillies_wins <- get_html_table(website, 1)
# change col names
colnames(phillies_wins) <- c("Game", "Date", "boxscore", "Team", "Home", "Opp", "W_or_L", "R", "RA", "Inn", "W-L", "Rank",
"GB", "Win", "Loss", "Save", "Time", "D/N", "Attendance", "cLI", "Streak", "Orig_Scheduled")
phillies_games <- phillies_wins %>%
filter(Game != "Gm#", # get rid of monthly headers
boxscore != "preview") %>%# get rid of games that haven't been played yet
mutate(Home = if_else(Home == "@", F, T),
Save = if_else(Save == "", NA, Save),
R = as.numeric(R),
RA = as.numeric(RA),
Rank = as.numeric(Rank),
GB = as.numeric(GB),
Attendance = as.numeric(gsub(",", "", Attendance))) %>%
select(-c(1, 3, 10, 20, 21, 22))
phillies_games %>%
ggplot(mapping = aes(x = Home, y = R)) +
geom_boxplot()
phillies_games <- phillies_wins %>%
filter(Game != "Gm#", # get rid of monthly headers
boxscore != "preview") %>%# get rid of games that haven't been played yet
mutate(Home = if_else(Home == "@", "Away", "Home"),
Save = if_else(Save == "", NA, Save),
R = as.numeric(R),
RA = as.numeric(RA),
Rank = as.numeric(Rank),
GB = as.numeric(GB),
Attendance = as.numeric(gsub(",", "", Attendance))) %>%
select(-c(1, 3, 10, 20, 21, 22))
phillies_games %>%
ggplot(mapping = aes(x = Home, y = R)) +
geom_boxplot()
phillies_games
website = "https://www.baseball-reference.com/teams/PHI/2023-schedule-scores.shtml"
phillies_wins <- get_html_table(website, 1)
# change col names
colnames(phillies_wins) <- c("Game", "Date", "boxscore", "Team", "Home", "Opp", "W_or_L", "R", "RA", "Inn", "W_L", "Rank",
"GB", "Win", "Loss", "Save", "Time", "D_or_N", "Attendance", "cLI", "Streak", "Orig_Scheduled")
phillies_games <- phillies_wins %>%
filter(Game != "Gm#", # get rid of monthly headers
boxscore != "preview") %>%# get rid of games that haven't been played yet
mutate(Home = if_else(Home == "@", "Away", "Home"),
Save = if_else(Save == "", NA, Save),
R = as.numeric(R),
RA = as.numeric(RA),
Rank = as.numeric(Rank),
GB = as.numeric(GB),
Attendance = as.numeric(gsub(",", "", Attendance))) %>%
select(-c(1, 3, 10, 20, 21, 22))
phillies_games %>%
ggplot(mapping = aes(x = Home, y = R)) +
geom_boxplot()
phillies_games
phillies_games %>%
ggplot(mapping = aes(x = D_or_N, y = R)) +
geom_boxplot()
phillies_games <- phillies_wins %>%
filter(Game != "Gm#", # get rid of monthly headers
boxscore != "preview") %>%# get rid of games that haven't been played yet
mutate(Home = if_else(Home == "@", "Away", "Home"),
Save = if_else(Save == "", NA, Save),
R = as.numeric(R),
RA = as.numeric(RA),
Rank = as.numeric(Rank),
GB = as.numeric(GB),
D_or_N = if_else(D_or_N == "D", "Day", "Night"),
Attendance = as.numeric(gsub(",", "", Attendance))) %>%
select(-c(1, 3, 10, 20, 21, 22))
phillies_games %>%
ggplot(mapping = aes(x = Home, y = R)) +
geom_boxplot()
phillies_games %>%
ggplot(mapping = aes(x = D_or_N, y = R)) +
geom_boxplot()
website = "https://www.baseball-reference.com/teams/PHI/2023-schedule-scores.shtml"
phillies_wins <- get_html_table(website, 1)
# change col names
colnames(phillies_wins) <- c("Game", "Date", "boxscore", "Team", "Home", "Opp", "W_or_L", "R", "RA", "Inn", "W_L", "Rank",
"GB", "Win", "Loss", "Save", "Time", "D_N", "Attendance", "cLI", "Streak", "Orig_Scheduled")
phillies_games <- phillies_wins %>%
filter(Game != "Gm#", # get rid of monthly headers
boxscore != "preview") %>%# get rid of games that haven't been played yet
mutate(Home = if_else(Home == "@", "Away", "Home"),
Save = if_else(Save == "", NA, Save),
R = as.numeric(R),
RA = as.numeric(RA),
Rank = as.numeric(Rank),
GB = as.numeric(GB),
D_or_N = if_else(D_or_N == "D", "Day", "Night"),
Attendance = as.numeric(gsub(",", "", Attendance))) %>%
select(-c(1, 3, 10, 20, 21, 22))
phillies_games %>%
ggplot(mapping = aes(x = Home, y = R)) +
geom_boxplot()
phillies_games %>%
ggplot(mapping = aes(x = D_or_N, y = R)) +
geom_boxplot()
website = "https://www.baseball-reference.com/teams/PHI/2023-schedule-scores.shtml"
phillies_wins <- get_html_table(website, 1)
# change col names
colnames(phillies_wins) <- c("Game", "Date", "boxscore", "Team", "Home", "Opp", "W_or_L", "R", "RA", "Inn", "W_L", "Rank",
"GB", "Win", "Loss", "Save", "Time", "D_N", "Attendance", "cLI", "Streak", "Orig_Scheduled")
phillies_games <- phillies_wins %>%
filter(Game != "Gm#", # get rid of monthly headers
boxscore != "preview") %>%# get rid of games that haven't been played yet
mutate(Home = if_else(Home == "@", "Away", "Home"),
Save = if_else(Save == "", NA, Save),
R = as.numeric(R),
RA = as.numeric(RA),
Rank = as.numeric(Rank),
GB = as.numeric(GB),
D_N = if_else(D_N == "D", "Day", "Night"),
Attendance = as.numeric(gsub(",", "", Attendance))) %>%
select(-c(1, 3, 10, 20, 21, 22))
phillies_games %>%
ggplot(mapping = aes(x = Home, y = R)) +
geom_boxplot()
phillies_games %>%
ggplot(mapping = aes(x = D_N, y = R)) +
geom_boxplot()
phillies_games %>%
ggplot(mapping = aes(x = Home, y = R)) +
geom_boxplot()
library(tidyverse)
library(rvest)
library(vroom)
get_html_table <- function(url, index, header = T){
df <- url %>%
read_html() %>%
html_elements("table") %>%
html_table(header=header) %>%
.[[index]]
colnames(df) <- make.names(colnames(df))
df
}
website = "https://www.baseball-reference.com/teams/PHI/2023-schedule-scores.shtml"
phillies_wins <- get_html_table(website, 1)
# change col names
colnames(phillies_wins) <- c("Game", "Date", "boxscore", "Team", "Home", "Opp", "W_or_L", "R", "RA", "Inn", "W_L", "Rank",
"GB", "Win", "Loss", "Save", "Time", "D_N", "Attendance", "cLI", "Streak", "Orig_Scheduled")
phillies_games <- phillies_wins %>%
filter(Game != "Gm#", # get rid of monthly headers
boxscore != "preview") %>%# get rid of games that haven't been played yet
mutate(Home = if_else(Home == "@", "Away", "Home"),
Save = if_else(Save == "", NA, Save),
R = as.numeric(R),
RA = as.numeric(RA),
Rank = as.numeric(Rank),
GB = as.numeric(GB),
D_N = if_else(D_N == "D", "Day", "Night"),
Attendance = as.numeric(gsub(",", "", Attendance))) %>%
select(-c(1, 3, 10, 20, 21, 22))
phillies_games %>%
ggplot(mapping = aes(x = Home, y = R)) +
geom_boxplot()
phillies_games %>%
ggplot(mapping = aes(x = D_N, y = R)) +
geom_boxplot()
view(phillies_games)
phillies_games %>%
ggplot(mapping = aes(x = Date, y = Attendance)) +
geom_line()
phillies_games %>%
ggplot(mapping = aes(x = Date, y = Attendance)) +
geom_point()
phillies_games <- phillies_wins %>%
filter(Game != "Gm#", # get rid of monthly headers
boxscore != "preview") %>%# get rid of games that haven't been played yet
mutate(Home = if_else(Home == "@", "Away", "Home"),
Save = if_else(Save == "", NA, Save),
R = as.numeric(R),
RA = as.numeric(RA),
Rank = as.numeric(Rank),
GB = as.numeric(GB),
D_N = if_else(D_N == "D", "Day", "Night"),
Date = as.Date(Date, format = "%A, %b %d")
Attendance = as.numeric(gsub(",", "", Attendance))) %>%
phillies_games <- phillies_wins %>%
filter(Game != "Gm#", # get rid of monthly headers
boxscore != "preview") %>%# get rid of games that haven't been played yet
mutate(Home = if_else(Home == "@", "Away", "Home"),
Save = if_else(Save == "", NA, Save),
R = as.numeric(R),
RA = as.numeric(RA),
Rank = as.numeric(Rank),
GB = as.numeric(GB),
D_N = if_else(D_N == "D", "Day", "Night"),
Date = as.Date(Date, format = "%A, %b %d"),
Attendance = as.numeric(gsub(",", "", Attendance))) %>%
select(-c(1, 3, 10, 20, 21, 22))
phillies_games %>%
ggplot(mapping = aes(x = Home, y = R)) +
geom_boxplot()
phillies_games %>%
ggplot(mapping = aes(x = D_N, y = R)) +
geom_boxplot()
phillies_games %>%
ggplot(mapping = aes(x = Date, y = Attendance)) +
geom_point()
phillies_games %>%
ggplot(mapping = aes(x = Date, y = Attendance, color = D_N)) +
geom_point()
phillies_games %>%
ggplot(mapping = aes(x = Date, y = Attendance, color = Home)) +
geom_point()
phillies_games %>%
ggplot(mapping = aes(x = Date, y = Attendance, color = Home)) +
geom_point() +
theme(aspect.ratio = 1)
phillies_games %>%
ggplot(mapping = aes(x = Date, y = Attendance, color = Home)) +
geom_point()
phillies_games %>%
ggplot(mapping = aes(x = Date, y = Attendance)) +
geom_point()
colnames(phillies_games)
vroom_write(x=phillies_games, file="./phillies_games_2023.csv", delim=",")
cwd()
getwd()
# Libraries
library(tidyverse)
library(tidymodels)
library(vroom)
library(patchwork)
library(poissonreg)
library(rpart)
library(ranger)
# Read in the Data
train <- vroom("./train.csv")
test <- vroom("./test.csv")
# Libraries
library(tidyverse)
library(tidymodels)
library(vroom)
library(patchwork)
library(poissonreg)
library(rpart)
library(ranger)
# Read in the Data
train <- vroom("./train.csv")
test <- vroom("./test.csv")
# Remove casual and registered because we can't use them to predict
train <- train %>%
select(-casual, - registered)
setwd("~/Documents/BYU/stat348/KaggleBikeShare")
# Libraries
library(tidyverse)
library(tidymodels)
library(vroom)
library(patchwork)
library(poissonreg)
library(rpart)
library(ranger)
# Read in the Data
train <- vroom("./train.csv")
test <- vroom("./test.csv")
# Remove casual and registered because we can't use them to predict
train <- train %>%
select(-casual, - registered)
# Function for predicting and formatting data for Kaggle Submission
predict_and_format <- function(Workflow, New_data, Output_file) {
result <- predict(Workflow, New_data) %>%
mutate(.pred = exp(.pred)) %>%
bind_cols(., New_data) %>%
select(datetime, .pred) %>%
rename(count = .pred) %>%
mutate(datetime = as.character(format(datetime)))
vroom::vroom_write(result, file = Output_file, delim = ",")
}
log_train <- train %>%
mutate(count=log(count))
my_recipe <- recipe(count ~ ., data = log_train) %>%
step_mutate(weather=ifelse(weather == 4, 3, weather)) %>% # Relabel weather 4 to 3
step_num2factor(weather, levels = c("sun", "mist", "rain")) %>%
step_num2factor(season, levels = c("spring", "summer", "fall", "winter")) %>%
step_mutate(holiday = factor(holiday, levels = c(0,1), labels = c("no", "yes"))) %>%
step_mutate(workingday = factor(workingday,levels = c(0,1), labels = c("no", "yes"))) %>%
step_time(datetime, features="hour") %>% # pull out individual variables from datetime
step_date(datetime, features="dow") %>%
step_date(datetime, features="month") %>%
step_date(datetime, features="year") %>%
step_rm(datetime) %>% # don't need it anymore
step_dummy(all_nominal_predictors()) %>% # make dummy variables
step_normalize(all_numeric_predictors()) %>%  # Make mean 0, sd=1
step_nzv(all_numeric_predictors())
my_tree_recipe <- recipe(count ~ ., data = log_train) %>%
step_time(datetime, features=c("hour")) %>%
step_mutate(weather=ifelse(weather==4, 3, weather)) %>%
step_num2factor(season, levels=c("spring", "summer", "fall", "winter")) %>%
step_num2factor(weather, levels=c("partly_cloudy", "misty", "rainy")) %>%
step_mutate(holiday=factor(holiday, levels=c(0,1), labels=c("no", "yes"))) %>%
step_mutate(workingday=factor(workingday,levels=c(0,1), labels=c("no", "yes"))) %>%
step_rm(datetime) %>%
step_dummy(all_nominal_predictors()) %>%
step_nzv(all_numeric_predictors())
rf_mod <- rand_forest(mtry = tune(),
min_n = tune(),
trees = 500) %>% # 500 or 1000
set_engine("ranger") %>%
set_mode("regression")
# create workflow with model and recipe
## I'll try using my regression tree recipe first
rf_wf <- workflow() %>%
add_recipe(my_tree_recipe) %>%
add_model(rf_mod)
# grid of tuning values
tuning_grid <- grid_regular(mtry(range = c(1, (ncol(log_train)-1))),
min_n(),
levels = 5) ## L^2 total tuning possibilities
# set up K-fold CV
folds <- vfold_cv(log_train, v = 5, repeats = 5)
rf_CV_results <- rf_wf %>%
tune_grid(resamples = folds,
grid = tuning_grid,
metrics = metric_set(rmse, mae)) #Or leave metrics NULL
# Find best tuning parameters
bestTune <- rf_CV_results %>%
select_best("rmse")
# Finalize workflow and predict
final_wf <- rf_wf %>%
finalize_workflow(bestTune) %>%
fit(data=log_train)
predict_and_format(final_wf, test, "./random_forest_predictions.csv")
