ggplot(mapping = aes(x = Home, y = R)) +
geom_boxplot()
phillies_games %>%
ggplot(mapping = aes(x = D_N, y = R)) +
geom_boxplot()
phillies_games %>%
ggplot(mapping = aes(x = Date, y = Attendance)) +
geom_point()
phillies_games %>%
ggplot(mapping = aes(RA, R)) +
geom_point()
phillies_games %>%
ggplot(mapping = aes(RA, R, color = W_or_L)) +
geom_point()
phillies_games %>%
ggplot(mapping = aes(x = Home, y = R)) +
geom_boxplot()
phillies_games %>%
ggplot(mapping = aes(x = D_N, y = R)) +
geom_boxplot()
phillies_games %>%
ggplot(mapping = aes(x = Date, y = Attendance)) +
geom_point()
phillies_games %>%
ggplot(mapping = aes(x = Date, y = Attendance)) +
geom_line()
phillies_games %>%
ggplot(mapping = aes(x = Date, y = Attendance)) +
geom_histogram()
phillies_games %>%
ggplot(mapping = aes(x = Date, y = Attendance)) +
geom_point()
ggplot(data = phillies_games, mapping = aes(x = Date, y = Attendance)) +
geom_point()
ggplot(data = phillies_games, mapping = aes(x = Date, y = Attendance)) +
geom_point()
phillies_games %>%
ggplot(mapping = aes(x = Home, y = R)) +
geom_boxplot()
phillies_games %>%
ggplot(mapping = aes(x = D_N, y = R)) +
geom_boxplot()
ggplot(data = phillies_games, mapping = aes(x = Date, y = Attendance)) +
geom_point()
website = "https://www.baseball-reference.com/teams/PHI/2023-schedule-scores.shtml"
phillies_wins <- get_html_table(website, 1)
# change col names
colnames(phillies_wins) <- c("Game", "Date", "boxscore", "Team", "Home", "Opp", "W_or_L", "R", "RA", "Inn", "W_L", "Rank",
"GB", "Win", "Loss", "Save", "Time", "D_N", "Attendance", "cLI", "Streak", "Orig_Scheduled")
phillies_games <- phillies_wins %>%
filter(Game != "Gm#", # get rid of monthly headers
boxscore != "preview") %>%# get rid of games that haven't been played yet
mutate(Home = if_else(Home == "@", "Away", "Home"),
Save = if_else(Save == "", NA, Save),
R = as.numeric(R),
RA = as.numeric(RA),
Rank = as.numeric(Rank),
GB = as.numeric(GB),
D_N = if_else(D_N == "D", "Day", "Night"),
Date = as.Date(Date, format = "%A, %b %d"),
Attendance = as.numeric(gsub(",", "", Attendance))) %>%
select(-c(1, 3, 10, 20, 21, 22))
phillies_games %>%
ggplot(mapping = aes(x = Home, y = R)) +
geom_boxplot()
phillies_games %>%
ggplot(mapping = aes(x = D_N, y = R)) +
geom_boxplot()
ggplot(data = phillies_games, mapping = aes(x = Date, y = Attendance)) +
geom_point()
phillies_games <- phillies_wins %>%
filter(Game != "Gm#", # get rid of monthly headers
boxscore != "preview") %>%# get rid of games that haven't been played yet
mutate(Home = if_else(Home == "@", "Away", "Home"),
Save = if_else(Save == "", NA, Save),
R = as.numeric(R),
RA = as.numeric(RA),
Rank = as.numeric(Rank),
GB = as.numeric(GB),
D_N = if_else(D_N == "D", "Day", "Night"),
Date = as.Date(Date, format = "%A, %b %d"),
Attendance = as.numeric(gsub(",", "", Attendance))) %>%
filter(rm(NA == T)) %>%
select(-c(1, 3, 10, 20, 21, 22))
phillies_games <- phillies_wins %>%
filter(Game != "Gm#", # get rid of monthly headers
boxscore != "preview") %>%# get rid of games that haven't been played yet
mutate(Home = if_else(Home == "@", "Away", "Home"),
Save = if_else(Save == "", NA, Save),
R = as.numeric(R),
RA = as.numeric(RA),
Rank = as.numeric(Rank),
GB = as.numeric(GB),
D_N = if_else(D_N == "D", "Day", "Night"),
Date = as.Date(Date, format = "%A, %b %d"),
Attendance = as.numeric(gsub(",", "", Attendance))) %>%
na.omit() %>%
select(-c(1, 3, 10, 20, 21, 22))
colnames(phillies_games)
phillies_games %>%
ggplot(mapping = aes(x = Home, y = R)) +
geom_boxplot()
phillies_games %>%
ggplot(mapping = aes(x = D_N, y = R)) +
geom_boxplot()
ggplot(data = phillies_games, mapping = aes(x = Date, y = Attendance)) +
geom_point()
vroom_write(x=phillies_games, file="./phillies_games_2023.csv", delim=",")
ggsave("basic_plot.jpg", basic_scatter)
basic_scatter <- ggplot(data = phillies_games, mapping = aes(x = Date, y = Attendance)) +
geom_point()
ggsave("basic_plot.jpg", basic_scatter)
getwd()
ggplot(data = phillies_games, mapping = aes(x = Date, y = Attendance, color = Home)) +
geom_point()
ggplot(data = phillies_games, mapping = aes(x = Date, y = Attendance, fill = Home)) +
geom_point() +
labs(title = "Phillies Attendance Throughout the Season")
ggplot(data = phillies_games, mapping = aes(x = Date, y = Attendance, color = Home)) +
geom_point() +
labs(title = "Phillies Attendance Throughout the Season")
ggplot(data = phillies_games, mapping = aes(x = Date, y = Attendance, color = Home)) +
geom_point() +
labs(title = "Phillies Attendance Throughout the 2023 Season")
ggplot(data = phillies_games, mapping = aes(x = Date, y = Attendance, color = Home)) +
geom_point() +
labs(title = "Phillies Attendance Throughout the 2023 Season",
legend = "")
ggplot(data = phillies_games, mapping = aes(x = Date, y = Attendance, color = Home)) +
geom_point() +
labs(title = "Phillies Attendance Throughout the 2023 Season",
legend = "The")
ggplot(data = phillies_games, mapping = aes(x = Date, y = Attendance, color = Home)) +
geom_point() +
labs(title = "Phillies Attendance Throughout the 2023 Season",
fill = "Location")
ggplot(data = phillies_games, mapping = aes(x = Date, y = Attendance, color = Home)) +
geom_point() +
labs(title = "Phillies Attendance Throughout the 2023 Season",
color = "Location")
ggplot(data = phillies_games, mapping = aes(x = Date, y = Attendance, color = Home)) +
geom_point()
basic_colors <- ggplot(data = your_data, mapping = aes(x = x_axis_values, y = y_axis_values)) + # specify what you are graphing
graphing_function() # the function you use here determines what your graph will be
basic_colors <- ggplot(data = phillies_games, mapping = aes(x = Date, y = Attendance, color = Home)) +
geom_point()
ggsave("basic_colors.jpg", basic_colors)
names <- c("Brian", "Lucy", "Allison", "Autumn", "Justin", "Connor")
sample(names, 1, replace = T)
sample(names, 1, replace = T)
sample(names, 1, replace = T)
sample(names, 1, replace = F)
sample(names, 1, replace = F)
sample(names, 1, replace = F)
sample(names, 1, replace = F)
sample(names, 1, replace = F)
sample(names, 1, replace = F)
sample(names, 1, replace = F)
sample(names, 1, replace = F)
sample(names, 1, replace = F)
sample(names, 1, replace = F)
sample(names, 1, replace = F)
sample(names, 1, replace = F)
names <- c("Brian", "Lucy", "Allison", "Autumn", "Justin", "Connor")
names <- c("Brian", "Lucy", "Allison", "Autumn", "Justin", "Connor")
sample(names, 1, replace = F)
sample(names, 1, replace = F)
sample(names, 1, replace = F)
sample(names, 1, replace = F)
sample(names, 1, replace = F)
sample(names, 1, replace = F)
sample(names, 6, replace = F)
sample(names, 6, replace = F)
sample(names, 6, replace = F)
sample(names, 6, replace = F)
sample(names, 6, replace = F)
sample(names, 6, replace = F)
sample(names, 6, replace = F)
sample(names, 6, replace = F)
sample(names, 6, replace = F)
sample(names, 6, replace = T)
sample(names, 6, replace = T)
sample(names, 6, replace = T)
sample(names, 6, replace = T)
sample(names, 6, replace = T)
# Libraries
library(tidyverse)
library(tidymodels)
library(vroom)
library(patchwork)
library(poissonreg)
library(rpart)
library(ranger)
library(stacks)
library(parsnip)
# Read in the Data
train <- vroom("./train.csv")
test <- vroom("./test.csv")
# Remove casual and registered because we can't use them to predict
train <- train %>%
select(-casual, - registered)
setwd("~/Documents/BYU/stat348/KaggleBikeShare")
# Read in the Data
train <- vroom("./train.csv")
test <- vroom("./test.csv")
# Remove casual and registered because we can't use them to predict
train <- train %>%
select(-casual, - registered)
# Function for predicting and formatting data for Kaggle Submission
predict_and_format <- function(Workflow, New_data, Output_file) {
result <- predict(Workflow, New_data) %>%
mutate(.pred = exp(.pred)) %>%
bind_cols(., New_data) %>%
select(datetime, .pred) %>%
rename(count = .pred) %>%
mutate(datetime = as.character(format(datetime)))
vroom::vroom_write(result, file = Output_file, delim = ",")
}
log_train <- train %>%
mutate(count=log(count))
my_recipe <- recipe(count ~ ., data = log_train) %>%
step_mutate(weather = ifelse(weather == 4, 3, weather)) %>% # Relabel weather 4 to 3
step_num2factor(weather, levels = c("sun", "mist", "rain")) %>%
step_num2factor(season, levels = c("spring", "summer", "fall", "winter")) %>%
step_mutate(holiday = factor(holiday, levels = c(0, 1), labels = c("no", "yes"))) %>%
step_mutate(workingday = factor(workingday, levels = c(0, 1), labels = c("no", "yes"))) %>%
step_time(datetime, features = "hour") %>% # pull out individual variables from datetime
step_date(datetime, features = "dow") %>%
step_date(datetime, features = "month") %>%
step_date(datetime, features = "year") %>%
step_rm(datetime) %>% # don't need it anymore
step_dummy(all_nominal_predictors()) %>% # make dummy variables
step_normalize(all_numeric_predictors()) %>%  # Make mean 0, sd=1
step_nzv(all_numeric_predictors())
prepped_recipe <- prep(my_recipe)
# set up linear regression model
lin_mod <- linear_reg() %>%
set_engine("lm")
linear_workflow <- workflow() %>%
add_recipe(prepped_recipe) %>%
add_model(lin_mod) %>%
fit(data = log_train)
# Look at the fitted LM model
extract_fit_engine(linear_workflow) %>%
summary()
# Get Predictions for test set AND format for Kaggle submission
predict_and_format(linear_workflow, test, "./linear_predictions.csv")
# set up linear regression model
lin_mod <- linear_reg() %>%
set_engine("lm")
linear_workflow <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(lin_mod) %>%
fit(data = log_train)
# Look at the fitted LM model
extract_fit_engine(linear_workflow) %>%
summary()
# Get Predictions for test set AND format for Kaggle submission
predict_and_format(linear_workflow, test, "./linear_predictions.csv")
prepped_recipe <- prep(my_recipe)
bake(prepped_recipe, new_data = log_train) #Make sure recipe work on train
my_recipe <- recipe(count ~ ., data = log_train) %>%
step_mutate(weather = ifelse(weather == 4, 3, weather)) %>% # Relabel weather 4 to 3
step_num2factor(weather, levels = c("sun", "mist", "rain")) %>%
step_num2factor(season, levels = c("spring", "summer", "fall", "winter")) %>%
step_mutate(holiday = factor(holiday, levels = c(0, 1), labels = c("no", "yes"))) %>%
step_mutate(workingday = factor(workingday, levels = c(0, 1), labels = c("no", "yes"))) %>%
step_time(datetime, features = "hour") %>% # pull out individual variables from datetime
step_date(datetime, features = "dow") %>%
step_date(datetime, features = "month") %>%
step_date(datetime, features = "year") %>%
step_mutate(datetime_year = factor(datetime_year, levels = c(0, 1), labels = c("label1", "label2"))) %>%
step_rm(datetime) %>% # don't need it anymore
step_dummy(all_nominal_predictors()) %>% # make dummy variables
step_normalize(all_numeric_predictors()) %>%  # Make mean 0, sd=1
step_nzv(all_numeric_predictors())
prepped_recipe <- prep(my_recipe)
bake(prepped_recipe, new_data = log_train) #Make sure recipe work on train
bake(prepped_recipe, new_data = log_train) #Make sure recipe work on train
my_recipe <- recipe(count ~ ., data = log_train) %>%
step_mutate(weather = ifelse(weather == 4, 3, weather)) %>% # Relabel weather 4 to 3
step_num2factor(weather, levels = c("sun", "mist", "rain")) %>%
step_num2factor(season, levels = c("spring", "summer", "fall", "winter")) %>%
step_mutate(holiday = factor(holiday, levels = c(0, 1), labels = c("no", "yes"))) %>%
step_mutate(workingday = factor(workingday, levels = c(0, 1), labels = c("no", "yes"))) %>%
step_time(datetime, features = "hour") %>% # pull out individual variables from datetime
step_date(datetime, features = "dow") %>%
step_date(datetime, features = "month") %>%
step_date(datetime, features = "year") %>%
step_rm(datetime) %>% # don't need it anymore
step_dummy(all_nominal_predictors()) %>% # make dummy variables
step_normalize(all_numeric_predictors()) %>%  # Make mean 0, sd=1
step_nzv(all_numeric_predictors())
prepped_recipe <- prep(my_recipe)
view(bake(prepped_recipe, new_data = log_train)) #Make sure recipe work on train
my_tree_recipe <- recipe(count ~ ., data = log_train) %>%
step_time(datetime, features=c("hour")) %>%
step_mutate(weather=ifelse(weather==4, 3, weather)) %>%
step_num2factor(season, levels=c("spring", "summer", "fall", "winter")) %>%
step_num2factor(weather, levels=c("partly_cloudy", "misty", "rainy")) %>%
step_mutate(holiday=factor(holiday, levels=c(0,1), labels=c("no", "yes"))) %>%
step_mutate(workingday=factor(workingday,levels=c(0,1), labels=c("no", "yes"))) %>%
step_rm(datetime) %>%
step_dummy(all_nominal_predictors()) %>%
step_nzv(all_numeric_predictors())
prepped_tree_recipe <- prep(my_tree_recipe)
bake(prepped_tree_recipe, log_train)
my_tree_recipe <- recipe(count ~ ., data = log_train) %>%
step_time(datetime, features=c("hour")) %>%
step_date(datetime, features = "year") %>%
step_mutate(weather=ifelse(weather==4, 3, weather)) %>%
step_num2factor(season, levels=c("spring", "summer", "fall", "winter")) %>%
step_num2factor(weather, levels=c("partly_cloudy", "misty", "rainy")) %>%
step_mutate(holiday=factor(holiday, levels=c(0,1), labels=c("no", "yes"))) %>%
step_mutate(workingday=factor(workingday,levels=c(0,1), labels=c("no", "yes"))) %>%
step_rm(datetime) %>%
step_dummy(all_nominal_predictors()) %>%
step_nzv(all_numeric_predictors())
prepped_tree_recipe <- prep(my_tree_recipe)
bake(prepped_tree_recipe, log_train)
my_tree_recipe <- recipe(count ~ ., data = log_train) %>%
step_time(datetime, features = "hour") %>%
step_date(datetime, features = "year") %>%
step_mutate(weather = ifelse(weather == 4, 3, weather)) %>%
step_num2factor(season, levels = c("spring", "summer", "fall", "winter")) %>%
step_num2factor(weather, levels = c("partly_cloudy", "misty", "rainy")) %>%
step_mutate(holiday = factor(holiday, levels = c(0, 1), labels = c("no", "yes"))) %>%
step_mutate(workingday = factor(workingday, levels = c(0, 1), labels = c("no", "yes"))) %>%
step_rm(datetime) %>%
step_mutate(year = factor(year, levels = c(2011, 2012), labels = c("2011", "2012"))) %>%
step_dummy(all_nominal_predictors()) %>%
step_nzv(all_numeric_predictors())
prepped_tree_recipe <- prep(my_tree_recipe)
bake(prepped_tree_recipe, log_train)
prepped_tree_recipe <- prep(my_tree_recipe)
my_tree_recipe <- recipe(count ~ ., data = log_train) %>%
step_time(datetime, features = "hour") %>%
step_mutate(year = factor(year(datetime), levels = c(2011, 2012), labels = c("2011", "2012"))) %>%
step_num2factor(season, levels = c("spring", "summer", "fall", "winter")) %>%
step_num2factor(weather, levels = c("partly_cloudy", "misty", "rainy")) %>%
step_mutate(holiday = factor(holiday, levels = c(0, 1), labels = c("no", "yes"))) %>%
step_mutate(workingday = factor(workingday, levels = c(0, 1), labels = c("no", "yes"))) %>%
step_rm(datetime) %>%
step_dummy(all_nominal_predictors()) %>%
step_nzv(all_numeric_predictors())
prepped_tree_recipe <- prep(my_tree_recipe)
bake(prepped_tree_recipe, log_train)
# Create a workflow with model & recipe
tree_wf <- workflow() %>%
add_recipe(my_tree_recipe) %>%
add_model(my_mod)
my_mod <- decision_tree(tree_depth = tune(),
cost_complexity = tune(),
min_n=tune()) %>% #Type of model
set_engine("rpart") %>% # Engine = What R function to use
set_mode("regression")
my_tree_recipe <- recipe(count ~ ., data = log_train) %>%
step_time(datetime, features = "hour") %>%
step_mutate(year = factor(year(datetime), levels = c(2011, 2012), labels = c("2011", "2012"))) %>%
step_num2factor(season, levels = c("spring", "summer", "fall", "winter")) %>%
step_num2factor(weather, levels = c("partly_cloudy", "misty", "rainy")) %>%
step_mutate(holiday = factor(holiday, levels = c(0, 1), labels = c("no", "yes"))) %>%
step_mutate(workingday = factor(workingday, levels = c(0, 1), labels = c("no", "yes"))) %>%
step_rm(datetime) %>%
step_dummy(all_nominal_predictors()) %>%
step_nzv(all_numeric_predictors())
prepped_tree_recipe <- prep(my_tree_recipe)
bake(prepped_tree_recipe, log_train)
# Create a workflow with model & recipe
tree_wf <- workflow() %>%
add_recipe(my_tree_recipe) %>%
add_model(my_mod)
## Set up grid of tuning values
tuning_grid <- grid_regular(tree_depth(),
cost_complexity(),
min_n(),
levels = 6) ## L^2 total tuning possibilities
# Set up K-fold CV
folds <- vfold_cv(log_train, v = 5, repeats = 5)
tree_CV_results <- tree_wf %>%
tune_grid(resamples=folds,
grid=tuning_grid,
metrics=metric_set(rmse, mae)) #Or leave metrics NULL
my_mod <- decision_tree(tree_depth = tune(),
cost_complexity = tune(),
min_n=tune()) %>% #Type of model
set_engine("rpart") %>% # Engine = What R function to use
set_mode("regression")
my_tree_recipe <- recipe(count ~ ., data = log_train) %>%
step_time(datetime, features = "hour") %>%
step_naomit(year(datetime)) %>%  # Remove observations with missing values in 'year'
step_mutate(year = factor(year(datetime), levels = c(2011, 2012), labels = c("2011", "2012"))) %>%
step_num2factor(season, levels = c("spring", "summer", "fall", "winter")) %>%
step_num2factor(weather, levels = c("partly_cloudy", "misty", "rainy")) %>%
step_mutate(holiday = factor(holiday, levels = c(0, 1), labels = c("no", "yes"))) %>%
step_mutate(workingday = factor(workingday, levels = c(0, 1), labels = c("no", "yes"))) %>%
step_rm(datetime) %>%
step_dummy(all_nominal_predictors()) %>%
step_nzv(all_numeric_predictors())
prepped_tree_recipe <- prep(my_tree_recipe)
bake(prepped_tree_recipe, log_train)
prepped_tree_recipe <- prep(my_tree_recipe)
my_tree_recipe <- recipe(count ~ ., data = log_train) %>%
step_time(datetime, features = "hour") %>%
step_naomit(year(datetime)) %>%  # Remove observations with missing values in 'year'
step_mutate(year = factor(year(datetime), levels = c(2011, 2012), labels = c("2011", "2012"))) %>%
step_num2factor(season, levels = c("spring", "summer", "fall", "winter")) %>%
step_num2factor(weather, levels = c("partly_cloudy", "misty", "rainy")) %>%
step_mutate(holiday = factor(holiday, levels = c(0, 1), labels = c("no", "yes"))) %>%
step_mutate(workingday = factor(workingday, levels = c(0, 1), labels = c("no", "yes"))) %>%
step_rm(datetime) %>%
step_dummy(all_nominal_predictors()) %>%
step_nzv(all_numeric_predictors())
prepped_tree_recipe <- prep(my_tree_recipe)
log_train <- na.omit(log_train)  # Remove rows with missing values in any variable
my_tree_recipe <- recipe(count ~ ., data = log_train) %>%
step_time(datetime, features = "hour") %>%
step_mutate(year = factor(year(datetime), levels = c(2011, 2012), labels = c("2011", "2012"))) %>%
step_num2factor(season, levels = c("spring", "summer", "fall", "winter")) %>%
step_num2factor(weather, levels = c("partly_cloudy", "misty", "rainy")) %>%
step_mutate(holiday = factor(holiday, levels = c(0, 1), labels = c("no", "yes"))) %>%
step_mutate(workingday = factor(workingday, levels = c(0, 1), labels = c("no", "yes"))) %>%
step_rm(datetime) %>%
step_dummy(all_nominal_predictors()) %>%
step_nzv(all_numeric_predictors())
prepped_tree_recipe <- prep(my_tree_recipe)
bake(prepped_tree_recipe, log_train)
install.packages('xgboost')
# XGBoost regression -----------------------------------------------------
library(xgboost)
xgb_mod <- boost_tree(
trees = tune(),
mtry = tune(),
min_n = tune(),
learn_rate = tune()
) %>%
set_engine("xgboost") %>%
set_mode("regression")
xgb_wf <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(xgb_mod) %>%
fit(data = log_train)
# Look at the fitted XGBoost model
extract_fit_engine(xgb_wf) %>%
summary()
xgb_wf <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(xgb_mod) %>%
fit(data = log_train)
xgb_mod <- boost_tree(
trees = tune(),
mtry = tune(),
min_n = tune(),
learn_rate = tune()
) %>%
set_engine("xgboost") %>%
set_mode("regression")
xgb_wf <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(xgb_mod) %>%
fit(data = log_train)
xgb_mod <- boost_tree(
trees = tune(),
mtry = tune(),
min_n = tune(),
learn_rate = tune()
) %>%
set_engine("xgboost") %>%
set_mode("regression")
xgb_wf <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(xgb_mod) %>%
fit(data = log_train)
# Look at the fitted XGBoost model
extract_fit_engine(xgb_wf) %>%
summary()
xgb_wf <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(xgb_mod) %>%
fit(data = log_train)
xgb_mod <- boost_tree(
trees = tune::tune(),
mtry = tune::tune(),
min_n = tune::tune(),
learn_rate = tune::tune()
) %>%
set_engine("xgboost") %>%
set_mode("regression")
xgb_wf <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(xgb_mod) %>%
fit(data = log_train)
# Look at the fitted XGBoost model
extract_fit_engine(xgb_wf) %>%
summary()
# XGBoost regression -----------------------------------------------------
library(xgboost)
xgb_mod <- boost_tree(
trees = tune::tune(),
tree_depth = tune::tune(),
mtry = tune::tune(),
learn_rate = tune::tune()
) %>%
set_engine("xgboost", objective = "reg:squarederror") %>%  # Objective for regression
set_mode("regression")
xgb_wf <- workflow() %>%
add_recipe(my_recipe) %>%
add_model(xgb_mod) %>%
fit(data = log_train)
# Look at the fitted XGBoost model
extract_fit_engine(xgb_wf) %>%
summary()
